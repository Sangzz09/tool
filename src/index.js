import express from "express";
import fetch from "node-fetch";

const app = express();
const PORT = process.env.PORT || 10000;
const SOURCE_API = "https://hitclub-all-ban-o5ir.onrender.com/api/taixiu";

let history = [];
let stats = { total: 0, correct: 0, wrong: 0 };
let predictedPhien = null;
let currentData = {};

// ===== DANH S√ÅCH C·∫¶U TH·ª∞C T·∫æ (40 lo·∫°i) =====
const patternList = {
  "TTTTTT": "C·∫ßu b·ªát T√†i",
  "XXXXXX": "C·∫ßu b·ªát X·ªâu",
  "TXTXTX": "C·∫ßu xen k·∫Ω 1-1",
  "TTXXTT": "C·∫ßu 2-2 ƒë·ªÅu",
  "TTTXXX": "C·∫ßu 3-3",
  "TTTX": "C·∫ßu 3 T√†i 1 X·ªâu",
  "XXXT": "C·∫ßu 3 X·ªâu 1 T√†i",
  "TTTXX": "C·∫ßu g√£y T√†i",
  "XXXT": "C·∫ßu g√£y X·ªâu",
  "TXTXX": "C·∫ßu nh·∫•p nh·∫£",
  "TTTTX": "C·∫ßu r·ªìng T√†i",
  "XXXXT": "C·∫ßu r·ªìng X·ªâu",
  "TTTXTX": "C·∫ßu ƒë·∫£o nh·∫π T√†i",
  "XXXTXX": "C·∫ßu ƒë·∫£o nh·∫π X·ªâu",
  "TTXTT": "C·∫ßu l√≤ xo T√†i",
  "XXTXX": "C·∫ßu l√≤ xo X·ªâu",
  "TXTTX": "C·∫ßu xen T√†i",
  "XTXXT": "C·∫ßu xen X·ªâu",
  "TTTXTTTX": "C·∫ßu ƒë√¥i r·ªìng T√†i",
  "XXXTXXXT": "C·∫ßu ƒë√¥i r·ªìng X·ªâu",
  "TTXXTTXX": "C·∫ßu xen 2-2",
  "TTTXTTTX": "C·∫ßu 3-1-3",
  "TTTXTXTX": "C·∫ßu gi·∫≠t 8 b∆∞·ªõc T√†i",
  "XXXTXTXX": "C·∫ßu gi·∫≠t 8 b∆∞·ªõc X·ªâu",
  "TXTXXTXT": "C·∫ßu ziczac 8 b∆∞·ªõc",
  "TTTTXT": "C·∫ßu 5-1 T√†i",
  "XXXXTX": "C·∫ßu 5-1 X·ªâu",
  "TTTXXT": "C·∫ßu ƒë·ª©t ƒëo·∫°n",
  "XXTTTX": "C·∫ßu ng∆∞·ª£c pha",
  "TXTTTX": "C·∫ßu l·∫∑p 1-3-1",
  "TXTXXX": "C·∫ßu 1-3-2",
  "TTXXTX": "C·∫ßu b·∫ª gi·ªØa",
  "TTTXXXT": "C·∫ßu h·ªón h·ª£p T√†i",
  "XXXTXXT": "C·∫ßu h·ªón h·ª£p X·ªâu",
  "TXTXTT": "C·∫ßu ƒë·∫£o cu·ªëi T√†i",
  "XTXXTT": "C·∫ßu ƒë·∫£o cu·ªëi X·ªâu",
  "TTTTT": "C·∫ßu k√©o 5 T√†i",
  "XXXXX": "C·∫ßu k√©o 5 X·ªâu",
  "TTTXTT": "C·∫ßu h·ªìi T√†i",
  "XXTXTXX": "C·∫ßu h·ªìi X·ªâu"
};

// ===== 10 THU·∫¨T TO√ÅN N√ÇNG CAO =====
function markovPredict(hist) {
  if (hist.length < 10) return 0.5;
  let transitions = { TT: 0, TX: 0, XX: 0, XT: 0 };
  for (let i = 1; i < hist.length; i++) {
    const prev = hist[i - 1] === "Tai" ? "T" : "X";
    const curr = hist[i] === "Tai" ? "T" : "X";
    transitions[prev + curr]++;
  }
  const pTai = transitions.TT / (transitions.TT + transitions.TX || 1);
  return isNaN(pTai) ? 0.5 : pTai;
}

function entropyPredict(hist) {
  if (hist.length < 6) return 0.5;
  const unique = new Set(hist.slice(-6));
  return unique.size === 1 ? 0.2 : 0.8; // c√†ng h·ªón lo·∫°n ‚Üí kh·∫£ nƒÉng ƒë·∫£o cao
}

function momentumPredict(hist) {
  const last10 = hist.slice(-10);
  const t = last10.filter(x => x === "Tai").length;
  const x = last10.length - t;
  if (t > x + 2) return "Tai";
  if (x > t + 2) return "Xiu";
  return null;
}

// ===== PH√ÅT HI·ªÜN LO·∫†I C·∫¶U =====
function detectPattern(history) {
  const seq = history.slice(-8).map(v => (v === "Tai" ? "T" : "X")).join("");
  for (const [pattern, name] of Object.entries(patternList)) {
    if (seq.endsWith(pattern)) return name;
  }
  return "Kh√¥ng r√µ c·∫ßu";
}

// ===== D·ª∞ ƒêO√ÅN CU·ªêI =====
function predictNext(pattern, history) {
  const last = history.at(-1);
  const counts = { Tai: 0, Xiu: 0 };
  history.forEach(r => counts[r]++);

  // Base theo pattern
  let duDoan = pattern.includes("X·ªâu") ? "Xiu" : "Tai";

  // Markov x√°c su·∫•t
  const pMarkov = markovPredict(history);

  // Entropy & Momentum
  const e = entropyPredict(history);
  const m = momentumPredict(history);

  // N·∫øu c·∫ßu h·ªón lo·∫°n ho·∫∑c xen ‚Üí d√πng entropy ƒë·ªÉ ƒë·∫£o chi·ªÅu
  if (pattern.includes("ƒë·∫£o") || pattern.includes("xen") || e > 0.7)
    duDoan = last === "Tai" ? "Xiu" : "Tai";

  // Momentum override
  if (m) duDoan = m;

  // Markov override
  if (pMarkov > 0.6) duDoan = "Tai";
  if (pMarkov < 0.4) duDoan = "Xiu";

  // ƒê·ªô tin c·∫≠y t·ªïng h·ª£p
  const diff = Math.abs(counts.Tai - counts.Xiu);
  const doTinCay = `${Math.min(60 + diff * 3 + Math.abs(pMarkov - 0.5) * 80, 96).toFixed(0)}%`;

  return { duDoan, doTinCay };
}

// ===== C·∫¨P NH·∫¨T API =====
async function updateData() {
  try {
    const res = await fetch(SOURCE_API);
    const data = await res.json();
    if (!data || !data.ket_qua) return;

    const { phien, xuc_xac, tong, ket_qua } = data;
    if (phien === predictedPhien) return; // ch·ªâ d·ª± ƒëo√°n 1 l·∫ßn/phi√™n

    predictedPhien = phien;
    history.push(ket_qua);
    if (history.length > 120) history.shift();

    const pattern = detectPattern(history);
    const { duDoan, doTinCay } = predictNext(pattern, history);

    stats.total++;
    if (duDoan === ket_qua) stats.correct++;
    else stats.wrong++;

    currentData = {
      phien,
      xuc_xac,
      tong,
      ket_qua,
      du_doan: duDoan,
      do_tin_cay: doTinCay,
      pattern,
      so_phien_du_doan: stats.total,
      so_dung: stats.correct,
      so_sai: stats.wrong,
      dev: "@minhsangdangcap"
    };

    console.log(`‚úÖ Phi√™n ${phien}: ${ket_qua} ‚Üí D·ª± ƒëo√°n: ${duDoan} (${doTinCay})`);
  } catch (err) {
    console.log("‚ö†Ô∏è L·ªói d·ªØ li·ªáu:", err.message);
  }
}

// ===== T·ª∞ ƒê·ªòNG C·∫¨P NH·∫¨T M·ªñI 6 GI√ÇY =====
setInterval(updateData, 6000);

// ===== ROUTE API =====
app.get("/api/taixiu", (req, res) => res.json(currentData));

app.listen(PORT, () => console.log(`üöÄ Server HitClub AI ƒëang ch·∫°y t·∫°i c·ªïng ${PORT}`));
