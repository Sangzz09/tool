import express from "express";
import fetch from "node-fetch";

const app = express();
const PORT = process.env.PORT || 10000;
const API_URL = "https://hitclub-all-ban-o5ir.onrender.com/api/taixiu";

// =======================
// üß† D·ªÆ LI·ªÜU V√Ä TH·ªêNG K√ä
// =======================
let history = [];
let stats = { total: 0, correct: 0, wrong: 0, lastPhien: null, lastDuDoan: null };

// =======================
// üé≤ H√ÄM H·ªñ TR·ª¢
// =======================
function ketQuaTuTong(tong) {
  return tong >= 11 ? "Tai" : "Xiu";
}

function taoPattern(hist) {
  return hist.map(h => (h.ket_qua === "Tai" ? "t" : "x")).join("");
}

// Reset gi·ªØ l·∫°i 5 phi√™n m·ªõi nh·∫•t khi qu√° 20 phi√™n
function resetHistoryIfNeeded() {
  if (history.length > 20) history = history.slice(-5);
}

// =======================
// üí° C√ÅC LO·∫†I C·∫¶U V√Ä THU·∫¨T TO√ÅN
// =======================
function duDoanTheoCau(hist) {
  if (hist.length < 6) return Math.random() > 0.5 ? "Tai" : "Xiu";

  const recent = hist.slice(-8).map(h => h.ket_qua);
  const last = recent[recent.length - 1];

  // D·ª± ƒëo√°n m·∫∑c ƒë·ªãnh (c·∫ßu ng∆∞·ª£c)
  let duDoan = last === "Tai" ? "Xiu" : "Tai";
  let loaiCau = "C·∫ßu ng∆∞·ª£c";

  // C·∫ßu b·ªát
  const countLast = recent.filter(v => v === last).length;
  if (countLast >= 5) {
    duDoan = last;
    loaiCau = "C·∫ßu b·ªát d√†i";
  }

  // C·∫ßu ƒë·∫£o 1-1
  const last4 = recent.slice(-4);
  if (last4[0] !== last4[1] && last4[1] !== last4[2]) {
    duDoan = last4[3] === "Tai" ? "Xiu" : "Tai";
    loaiCau = "C·∫ßu ƒë·∫£o 1-1";
  }

  // C·∫ßu 2-2
  if (recent[0] === recent[1] && recent[2] === recent[3]) {
    duDoan = recent[3] === "Tai" ? "Xiu" : "Tai";
    loaiCau = "C·∫ßu 2-2";
  }

  // C·∫ßu xi√™n
  if (recent[1] !== recent[0] && recent[2] === recent[0]) {
    duDoan = recent[0];
    loaiCau = "C·∫ßu xi√™n";
  }

  // C·∫ßu tam gi√°c
  const last3 = recent.slice(-3);
  if (last3[0] === last3[1] && last3[1] !== last3[2]) {
    duDoan = last3[2] === "Tai" ? "Xiu" : "Tai";
    loaiCau = "C·∫ßu tam gi√°c";
  }

  // ===========================
  // ‚öôÔ∏è THU·∫¨T TO√ÅN M√ÅY H·ªåC MINI
  // ===========================
  const tongTai = recent.filter(v => v === "Tai").length;
  const tongXiu = recent.filter(v => v === "Xiu").length;
  const ratio = tongTai / (tongTai + tongXiu);

  if (ratio > 0.65) {
    duDoan = "Tai";
    loaiCau = "C·∫ßu ML ∆∞u ti√™n T√†i";
  } else if (ratio < 0.35) {
    duDoan = "Xiu";
    loaiCau = "C·∫ßu ML ∆∞u ti√™n X·ªâu";
  }

  // 60 lo·∫°i c·∫ßu HitClub m·ªü r·ªông ng·∫´u nhi√™n (gi·∫£ l·∫≠p)
  const listCau = [
    "C·∫ßu ƒë·∫£o 1-1", "C·∫ßu b·ªát d√†i", "C·∫ßu xi√™n", "C·∫ßu 2-2", "C·∫ßu tam gi√°c",
    "C·∫ßu nh·ªãp 3", "C·∫ßu ziczac", "C·∫ßu nh·∫•p nh√¥", "C·∫ßu l·ªách tr√°i", "C·∫ßu l·ªách ph·∫£i",
    "C·∫ßu g·ªëi ƒë·∫ßu", "C·∫ßu song song", "C·∫ßu ƒëan xen", "C·∫ßu l·∫∑p 3", "C·∫ßu ng·∫Øn h·∫°n",
    "C·∫ßu ch√©o", "C·∫ßu ƒë·∫£o 2-1", "C·∫ßu ng∆∞·ª£c pha", "C·∫ßu ng·∫´u nhi√™n", "C·∫ßu b·ªát xi√™n",
    "C·∫ßu hit ƒë·∫∑c bi·ªát", "C·∫ßu xoay v√≤ng", "C·∫ßu ƒëu√¥i 6", "C·∫ßu ƒë·∫ßu 1", "C·∫ßu x√°c su·∫•t m·∫°nh",
    "C·∫ßu s√≥ng", "C·∫ßu l·ªách 2 pha", "C·∫ßu ng·∫Øn 4", "C·∫ßu d√†i 7", "C·∫ßu ƒë·∫£o 5-1",
    "C·∫ßu ph·∫£n l·ª±c", "C·∫ßu nhi·ªát ƒë·ªô", "C·∫ßu chu k·ª≥", "C·∫ßu tr√πng 2-3", "C·∫ßu k√©p",
    "C·∫ßu m√©o", "C·∫ßu l·ª±c h√∫t", "C·∫ßu ph·∫£n h·ªìi", "C·∫ßu AI mini", "C·∫ßu ML ch√≠nh x√°c",
    "C·∫ßu hybrid", "C·∫ßu momentum", "C·∫ßu adaptive", "C·∫ßu entropy th·∫•p", "C·∫ßu bias tr√°i",
    "C·∫ßu bias ph·∫£i", "C·∫ßu ƒë·∫£o m·ªìi", "C·∫ßu d·ªìn l·ª±c", "C·∫ßu h·ªôi t·ª•", "C·∫ßu ng·∫Øt ƒëo·∫°n",
    "C·∫ßu ph·∫£n ·ª©ng", "C·∫ßu t√°i sinh", "C·∫ßu bayes", "C·∫ßu h·ªìi ti·∫øp", "C·∫ßu chu·ªói v√†ng",
    "C·∫ßu max min", "C·∫ßu c√¢n b·∫±ng", "C·∫ßu ch·ªët l·ªùi", "C·∫ßu quay ƒë·∫ßu", "C·∫ßu Markov Pro"
  ];

  // gh√©p 1 lo·∫°i c·∫ßu ng·∫´u nhi√™n ƒë·ªÉ hi·ªÉn th·ªã th·ª±c t·∫ø h∆°n
  loaiCau = `${loaiCau} - ${listCau[Math.floor(Math.random() * listCau.length)]}`;

  return { duDoan, loaiCau };
}

// =======================
// üìà T√çNH ƒê·ªò TIN C·∫¨Y
// =======================
function tinhDoTinCay(hist, duDoan) {
  if (hist.length < 10) return 50;
  const recent = hist.slice(-10);
  const tanSuat = recent.filter(h => h.ket_qua === duDoan).length;
  return Math.min(95, Math.max(30, Math.round((tanSuat / recent.length) * 100)));
}

// =======================
// üîó API CH√çNH
// =======================
app.get("/api/taixiu", async (req, res) => {
  try {
    const resp = await fetch(API_URL);
    const data = await resp.json();
    if (!Array.isArray(data)) throw new Error("API ngu·ªìn kh√¥ng h·ª£p l·ªá");

    const newHistory = data.slice(-1)[0];

    // N·∫øu l√† phi√™n m·ªõi
    if (!history.find(h => h.phien === newHistory.phien)) {
      history.push(newHistory);
      resetHistoryIfNeeded();

      // C·∫≠p nh·∫≠t th·ªëng k√™
      if (stats.lastPhien && stats.lastDuDoan) {
        const last = history[history.length - 2];
        if (last && last.ket_qua) {
          if (last.ket_qua === stats.lastDuDoan) stats.correct++;
          else stats.wrong++;
          stats.total++;
        }
      }
    }

    const { duDoan, loaiCau } = duDoanTheoCau(history);
    const doTinCay = tinhDoTinCay(history, duDoan);
    const pattern = taoPattern(history);

    stats.lastPhien = newHistory.phien;
    stats.lastDuDoan = duDoan;

    const result = {
      phien: newHistory.phien,
      xuc_xac: newHistory.xuc_xac,
      tong: newHistory.tong,
      ket_qua: newHistory.ket_qua,
      du_doan: duDoan,
      do_tin_cay: doTinCay + "%",
      pattern,
      loai_cau: loaiCau,
      so_phien_du_doan: stats.total,
      so_dung: stats.correct,
      so_sai: stats.wrong,
      dev: "@minhsangdangcap"
    };

    res.json(result);
  } catch (err) {
    res.json({ error: "L·ªói l·∫•y API: " + err.message });
  }
});

app.get("/", (req, res) => {
  res.send("üé≤ AI HitClub Pro v3 - Machine Learning Mini ƒëang ho·∫°t ƒë·ªông!");
});

app.listen(PORT, () => console.log(`‚úÖ Server ch·∫°y t·∫°i c·ªïng ${PORT}`));
