// ==========================================================
// üé≤ HITCLUB T√ÄI X·ªàU - D·ª∞ ƒêO√ÅN AI PRO v3.5
// Ngu·ªìn: https://hitclub-all-ban-o5ir.onrender.com/api/taixiu
// T√°c gi·∫£: @minhsangdangcap
// Deploy: Render.com
// ==========================================================

const express = require("express");
const axios = require("axios");
const app = express();
app.use(express.json());

/**
 * NOTE:
 * N·∫øu API ngu·ªìn thay ƒë·ªïi domain ho·∫∑c c·∫ßn token, b·∫°n c√≥ th·ªÉ ƒë·∫∑t SOURCE_API trong env var.
 * Ex: process.env.SOURCE_API
 */
const SOURCE_API = process.env.SOURCE_API || "https://hitclub-all-ban-o5ir.onrender.com/api/taixiu";

// ==========================
// Bi·∫øn l∆∞u tr·∫°ng th√°i
// ==========================
let history = [];              // L·ªãch s·ª≠ k·∫øt qu·∫£ (m·∫£ng "Tai" / "Xiu")
let stats = { dung: 0, sai: 0, tong: 0 }; // Th·ªëng k√™
let phienCount = 0;            // ƒê·∫øm s·ªë phi√™n ƒë√£ nh·∫≠n (d√πng cho reset)

// ==========================
// üîç Ph√°t hi·ªán lo·∫°i c·∫ßu n√¢ng cao (HitClub th·ª±c t·∫ø)
// Tr·∫£ v·ªÅ chu·ªói m√¥ t·∫£ lo·∫°i c·∫ßu
// ==========================
function detectPattern(list) {
  if (!Array.isArray(list) || list.length < 4) return "Ch∆∞a ƒë·ªß d·ªØ li·ªáu";
  const last5 = list.slice(-5);
  const p = last5.map(x => (x === "Tai" ? "t" : "x")).join("");

  // C√°c m·∫´u th·ª±c t·∫ø th∆∞·ªùng g·∫∑p (m·ªü r·ªông)
  if (last5.every(x => x === "Tai")) return "C·∫ßu b·ªát T√†i";
  if (last5.every(x => x === "Xiu")) return "C·∫ßu b·ªát X·ªâu";
  if (last5.every((x, i) => i === 0 || x !== last5[i - 1])) return "C·∫ßu 1-1 xen k·∫Ω";
  if (/ttx|xxt/.test(p)) return "C·∫ßu 2-1 g√£y";
  if (/ttxx|xxtt/.test(p)) return "C·∫ßu 2-2 lu√¢n phi√™n";
  if (/ttxxt|xxttx/.test(p)) return "C·∫ßu g√£y 2-1-2";
  if (/tttxx|xxxtt/.test(p)) return "C·∫ßu 3-2 xen k·∫Ω";
  if (/ttttt|xxxxx/.test(p)) return "C·∫ßu b·ªát d√†i 5";
  if (/txtxt|xtxtx/.test(p)) return "C·∫ßu ƒë·∫£o ƒë·ªÅu 1-1";
  if (/ttxtt|xxtxx/.test(p)) return "C·∫ßu 2-1-2 b·ªát nh·∫π";
  if (/ttxxtt|xxttxx/.test(p)) return "C·∫ßu 2-2-2 chu·ªói";
  if (/txxxt|xtttx/.test(p)) return "C·∫ßu 3-1 xen k·∫Ω";

  // N·∫øu kh√¥ng kh·ªõp c√°c quy t·∫Øc tr√™n:
  const last3Same = list.slice(-3).every(x => x === list[list.length - 1]);
  if (last3Same) return `C·∫ßu b·ªát 3 ${list[list.length - 1]}`;

  return "C·∫ßu h·ªón h·ª£p";
}

// ==========================
// üß† C√°c thu·∫≠t to√°n d·ª± ƒëo√°n
// Tr·∫£ v·ªÅ "Tai" ho·∫∑c "Xiu"
// ==========================

// 1Ô∏è‚É£ Markov Chain (r·∫•t ƒë∆°n gi·∫£n): n·∫øu 2 l·∫ßn tr∆∞·ªõc gi·ªëng nhau -> gi·ªØ, kh√°c -> ƒë·∫£o
function markovPredict(list) {
  if (!Array.isArray(list) || list.length < 2) return "Xiu";
  const last = list[list.length - 1];
  const prev = list[list.length - 2];
  return last === prev ? last : (last === "Tai" ? "Xiu" : "Tai");
}

// 2Ô∏è‚É£ Pattern Memory: t√¨m m·∫´u 3 tr∆∞·ªõc trong l·ªãch s·ª≠, l·∫•y ph·∫ßn t·ª≠ ti·∫øp theo n·∫øu c√≥
function patternMemory(list) {
  if (!Array.isArray(list) || list.length < 4) return "Tai";
  const pattern = list.slice(-3).join("-");
  const joined = list.join("-");
  const found = joined.lastIndexOf(pattern);
  if (found === -1) return "Xiu";
  const nextIndex = found + pattern.length + 1; // +1 v√¨ d·∫•u '-'
  const remainder = joined.slice(nextIndex);
  const next = remainder.split("-")[0];
  return next || "Tai";
}

// 3Ô∏è‚É£ Weighted Probability: d·ª±a tr√™n t·∫ßn su·∫•t t·ªïng
function weightedProbability(list) {
  if (!Array.isArray(list) || list.length === 0) return "Tai";
  const countTai = list.filter(x => x === "Tai").length;
  const countXiu = list.filter(x => x === "Xiu").length;
  // N·∫øu Tai > Xiu th√¨ d·ª± ƒëo√°n Xiu (k·ª≥ v·ªçng c√¢n b·∫±ng ng∆∞·ª£c l·∫°i) ‚Äî gi·ªØ nguy√™n logic tr∆∞·ªõc
  return countTai > countXiu ? "Xiu" : "Tai";
}

// ==========================
// üîÑ Reset l·ªãch s·ª≠ t·ª± ƒë·ªông
// Khi phienCount ƒë·∫°t 15 -> gi·ªØ 5 phi√™n g·∫ßn nh·∫•t, reset phienCount, reset stats
// ==========================
function autoReset() {
  if (phienCount >= 15) {
    console.log("üîÑ ƒê·∫°t 15 phi√™n ‚Üí Reset l·ªãch s·ª≠ (gi·ªØ 5 phi√™n g·∫ßn nh·∫•t)");
    history = history.slice(-5);
    phienCount = 0;
    stats = { dung: 0, sai: 0, tong: 0 };
  }
}

// ==========================
// üöÄ API ch√≠nh: /api/taixiu
// L·∫•y d·ªØ li·ªáu t·ª´ SOURCE_API, c·∫≠p nh·∫≠t history, ch·∫°y thu·∫≠t to√°n, tr·∫£ JSON
// ==========================
app.get("/api/taixiu", async (req, res) => {
  try {
    // L·∫•y d·ªØ li·ªáu g·ªëc
    const { data } = await axios.get(SOURCE_API, { timeout: 5000 });

    // D·ª± ƒëo√°n r·∫±ng API g·ªëc tr·∫£ v·ªÅ c√°c tr∆∞·ªùng nh∆∞ user ƒë√£ cung c·∫•p:
    // { phien, xuc_xac, tong, ket_qua, phien_sau, du_doan, do_tin_cay, giai_thich, id }
    const phien = data.phien ?? null;
    const xuc_xac = data.xuc_xac ?? (data["xuc xac"] || "");
    const tong_xuc_xac = data.tong ?? data.tong_xuc_xac ?? null;
    const ket_qua = data.ket_qua ?? data.ketQua ?? null;
    const phien_sau = data.phien_sau ?? null;

    // N·∫øu d·ªØ li·ªáu kh√¥ng h·ª£p l·ªá, tr·∫£ l·ªói r√µ r√†ng
    if (!phien || !ket_qua) {
      return res.status(502).json({ error: "D·ªØ li·ªáu t·ª´ ngu·ªìn kh√¥ng ƒë√∫ng ƒë·ªãnh d·∫°ng" });
    }

    // C·∫≠p nh·∫≠t l·ªãch s·ª≠ (m·∫£ng chu·ªói "Tai"/"Xiu")
    history.push(ket_qua);
    phienCount++;
    // gi·ªõi h·∫°n history tr√°nh tƒÉng v√¥ h·∫°n
    if (history.length > 30) history = history.slice(-20);

    // T·ª± ƒë·ªông reset khi ƒë·∫°t 15
    autoReset();

    // Ch·∫°y c√°c thu·∫≠t to√°n
    const p1 = markovPredict(history);
    const p2 = patternMemory(history);
    const p3 = weightedProbability(history);

    // ƒêa s·ªë phi·∫øu quy·∫øt ƒë·ªãnh du_doan chung
    const votes = [p1, p2, p3];
    const taiVotes = votes.filter(v => v === "Tai").length;
    const xiuVotes = votes.filter(v => v === "Xiu").length;
    const du_doan = taiVotes >= xiuVotes ? "Tai" : "Xiu";

    // Lo·∫°i c·∫ßu hi·ªán t·∫°i
    const loai_cau = detectPattern(history);

    // Th·ªëng k√™ ƒë√∫ng / sai: so s√°nh d·ª± ƒëo√°n l·∫ßn tr∆∞·ªõc v·ªõi k·∫øt qu·∫£ hi·ªán t·∫°i
    const prevPredictionCompare = history[history.length - 2] ?? null; // phi√™n tr∆∞·ªõc
    if (prevPredictionCompare) {
      stats.tong++;
      // NOTE: trong logic tr∆∞·ªõc, so s√°nh du_doan vs prev (phi√™n tr∆∞·ªõc) ƒë·ªÉ t√≠nh ƒë√∫ng/sai
      // ·ªû ƒë√¢y d√πng du_doan hi·ªán t·∫°i so v·ªõi prev ƒë·ªÉ ƒë·ªìng b·ªô v·ªõi m√£ tr∆∞·ªõc.
      if (du_doan === prevPredictionCompare) stats.dung++;
      else stats.sai++;
    }

    const do_tin_cay = stats.tong === 0 ? "0%" : ((stats.dung / stats.tong) * 100).toFixed(1) + "%";
    const pattern = history.map(x => (x === "Tai" ? "t" : "x")).join("");
    const giai_thich = `Ph√¢n t√≠ch ${loai_cau} b·∫±ng 3 thu·∫≠t to√°n: Markov, Pattern Memory, Weighted Probability. ƒê·ªô ch√≠nh x√°c trung b√¨nh hi·ªán t·∫°i: ${do_tin_cay}.`;

    // T·∫°o JSON tr·∫£ v·ªÅ theo ƒë·ªãnh d·∫°ng mong mu·ªën
    const out = {
      phien,
      xuc_xac,
      tong_xuc_xac,
      ket_qua,
      phien_sau,
      du_doan,
      do_tin_cay,
      giai_thich,
      id: "@minhsangdangcap",
      // th√™m m·ªü r·ªông th√¥ng tin ƒë·ªÉ client d·ªÖ d√πng
      loai_cau,
      thuat_toan: "Markov + Pattern + Weighted",
      so_lan_dung: stats.dung,
      so_lan_sai: stats.sai,
      pattern,
      tong_lich_su: history.length,
      votes_detail: { markov: p1, patternMemory: p2, weighted: p3 }
    };

    return res.json(out);
  } catch (err) {
    console.error("‚ùå L·ªói khi l·∫•y d·ªØ li·ªáu g·ªëc:", err && err.message ? err.message : err);
    return res.status(500).json({ error: "Kh√¥ng th·ªÉ truy c·∫≠p API g·ªëc ho·∫∑c l·ªói n·ªôi b·ªô" });
  }
});

// ==========================
// üîß Kh·ªüi ch·∫°y server
// ==========================
const PORT = process.env.PORT || 3000;
app.listen(PORT, () => {
  console.log(`‚úÖ HITCLUB AI PRO v3.5 ƒëang ch·∫°y t·∫°i c·ªïng ${PORT}`);
});
